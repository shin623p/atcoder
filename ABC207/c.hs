module Main where

import qualified Data.ByteString.Char8 as BS
-- import qualified Data.Set as Set
-- import Data.List
import Data.Maybe
import Control.Monad
-- import GHC.Exts


main :: IO ()
main =do
  n <- fst . fromJust . BS.readInt <$> BS.getLine
  xs <- map (map (fst . fromJust . BS.readInt) . BS.words) <$> replicateM n BS.getLine
  print $ solve xs


-- | func
--
-- >>> f [1, 1, 2]
-- (2,4)
-- 
-- >>> f [2, 2, 3]
-- (4,5)
--
-- >>> f [3, 2, 4]
-- (5,8)
--
-- >>> f [4, 2, 4]
-- (5,7)
--
-- >>> f [4, 0, 10 ^ 9]
-- (1,1999999999)
f :: [Int] -> (Int, Int)
f [1, l, r] = (l * 2, r * 2)
f [2, l, r] = (l * 2, r * 2 - 1)
f [3, l, r] = (l * 2 + 1, r * 2)
f [4, l, r] = (l * 2 + 1, r * 2 - 1)
f _ = undefined


-- | func
--
-- >>> g (2,4) (4,5)
-- True
-- 
-- >>> g (4,5) (5,8)
-- True
-- 
-- >>> g (2,5) (6,8)
-- False
--
-- >>> g (2,2) (2,2)
-- True
--
g :: (Int, Int) -> (Int, Int) -> Bool
g (a, b) (a', b')
  | b' < a = False
  | b < a' = False
  | otherwise = True


-- | solve for ABC207-C 
-- >>> solve [[1, 1, 2], [2, 2, 3], [3, 2, 4]]
-- 2
--
-- >>> solve [[4, 210068409, 221208102], [4, 16698200, 910945203], [4, 76268400, 259148323], [4, 370943597, 566244098], [1, 428897569, 509621647], [4, 250946752, 823720939], [1, 642505376, 868415584], [2, 619091266, 868230936], [2, 306543999, 654038915], [4, 486033777, 715789416], [1, 527225177, 583184546], [2, 885292456, 900938599], [3, 264004185, 486613484], [2, 345310564, 818091848], [1, 152544274, 521564293], [4, 13819154, 555218434], [3, 507364086, 545932412], [4, 797872271, 935850549], [2, 415488246, 685203817]]
-- 102
--
solve :: [[Int]] -> Int
solve xs = (`div` 2) $ length $ [ x | i <- xs', j <- xs', i /= j, let x = g i j, x]
  where
    xs' = map f xs


-- | solve for ABC207-C 
-- >>> solve2 [[1, 1, 2], [2, 2, 3], [3, 2, 4]]
-- 2
--
-- >>> solve2 [[4, 210068409, 221208102], [4, 16698200, 910945203], [4, 76268400, 259148323], [4, 370943597, 566244098], [1, 428897569, 509621647], [4, 250946752, 823720939], [1, 642505376, 868415584], [2, 619091266, 868230936], [2, 306543999, 654038915], [4, 486033777, 715789416], [1, 527225177, 583184546], [2, 885292456, 900938599], [3, 264004185, 486613484], [2, 345310564, 818091848], [1, 152544274, 521564293], [4, 13819154, 555218434], [3, 507364086, 545932412], [4, 797872271, 935850549], [2, 415488246, 685203817]]
-- 102
--
solve2 :: [[Int]] -> Int
solve2 xs = go xs' 0
  where
    xs' = map f xs
    go [x'] acc = acc
    go (x':xs') acc = go xs' (acc + length (filter id $ map (g x') xs'))
    go [] _ = undefined
    
